/**
 * UML Editor - ICP Project 2022
 * @file objectelement.h
 * @brief Header File for the ObjectElement Class and other Sub-Elements.
 * @author Ondrej Kováč (xkovac57)
 * @author Martin Talajka (xtalaj00)
 */

#ifndef OBJECTELEMENT_H
#define OBJECTELEMENT_H

#include "workscene.h"

#include <QComboBox>
#include <QMap>
#include <QWidget>

//Classes, pointers to which are needed in this header file
class MessageAnchor;
class SeqMessage;
class ActivationElement;

//Global pointers to class and sequence scenes
extern WorkScene *class_scene;
extern WorkScene *seq_scene;


namespace Ui {
class ObjectElement;
}
/**
* Object Element Class.
* Class for the Object Element in the sequence diagram.
*/
class ObjectElement : public QWidget
{
    Q_OBJECT

public:
    /**
    *Consturctor for Object Element.
    * @param parent Pointer to parent widget.
    */
    explicit ObjectElement(QWidget *parent = nullptr);
    /**
    *Destructor for Object Element.
    */
    ~ObjectElement();

    /**
    *Create Life Line for the object.
    *This function creates a vertical dashed line located bellow the Object Element, together with the first Message Anchor.
    *@param objectPtr Pointer to the Object Element.
    *@return Pointer to the QGraphicsLineItem of the life line. 
    */
    QGraphicsLineItem * createLifeLine(ObjectElement *objectPtr);

    /**
    *Name of the object.
    *Name of the object displayed in the Line Edit in the Object Element in sequence diagram.
    */
    QString name = "";

    /**
    * Function updates available classes
    * This Function is called when changes are made to the class diagram and update the pool of available classes in sequence diagram.
    */
    void updateClasses();
    
    /**
    *Pointer to ui elements of Object Element.
    */
    Ui::ObjectElement *ui; 

    /**
    *Dictionary of Message Anchors.
    *A dictionary of Message Anchors belonging to this Object Element. The dictionary uses pointers to QGraphicsProxyWidget as keys.
    */
    QMap<QGraphicsProxyWidget*, MessageAnchor*> anchors;

    /**
    *Vector of Proxy Widgets of anchors.
    *This Vector holds keys to the dictionary of anchors. It is used to order the anchors as they are created one by one.
    */
    QVector<QGraphicsProxyWidget *> proxyList;


    /**
    * Pointer to the left anchor of the Object Element.
    */
    MessageAnchor *leftAnchor = nullptr;
    /**
    * Pointer to the right anchor of the Object Element
    */
    MessageAnchor *rightAnchor = nullptr;

private:
    /**
    * Offset of Mouse.
    * Offset of mouse related to the Object Element. This prevents the object from "snapping" to mouse position when trying to move it.
    */
    QPoint offset;

    /**
    * Pointer to a Life Line.
    * Pointer to the Life Line of an Object Element.
    */
    QGraphicsLineItem * lifeLine = nullptr;


    /**
    * Pointer to the graphic representation of the left anchor.
    */
    QGraphicsProxyWidget *leftAnchorProxy = nullptr;

    /**
    * Pointer to the graphic representation of the right anchor.
    */
    QGraphicsProxyWidget *rightAnchorProxy = nullptr;





protected:
    /**
    * Redefinition of mousePressEvent for Object Element.
    * Used to set the mouse offset.
    * @param event the Mouse Event generated by the mouse press
    */
    virtual void mousePressEvent(QMouseEvent *event);
    /**
    * Redefinition of mouseMoveEvent for Object Element.
    * Used to move the object and it's children around the scene.
    * @param event the Mouse Event generated by the mouse movement
    */
    virtual void mouseMoveEvent(QMouseEvent *event);

private slots:
    /**
    * Increase the length of a life line.
    * This slot is bound to a signal emitted from a pressed "+" Button located on the Object Element.
    * It makes the life line longer and attaches a new Message anchor to the end.
    */
    void increaseLifeLine();
    /**
    * Decrease the length of a life line.
    * This slot is bound to a signal emitted from a pressed "-" Button located on the Object Element.
    * It makes the life line shorter and detaches the last Message Anchor from the line.
    */
    void decreaseLifeLine();
    /**
    * Slot for deletion of the Object Element;
    * This slot is bound to a signal emitted from a pressed "Del" Button located on the Object Element.
    * It calls the deconstructor for the Object Element.
    */
    void deleteObject();

    /**
    * Slot for editation of Object Element's class.
    * This slot is called every time a new Class Name is picked for the Object Element.
    * @param arg1 New Class
    */
    void on_comboBox_currentTextChanged(const QString &arg1);
    /**
    * Slot for editation of Object Element's name.
    * This slot is called every time the name of the Object Element is changed.
    * @param arg1 New Name
    */
    void on_lineEdit_textChanged(const QString &arg1);
};



namespace Ui {
class MessageAnchor;
}
/**
* Message Anchor Class.
* Class for the Message Anchor located on the sides of Object Elements and on the life lines of Actor and Object Elements
*/
class MessageAnchor : public QWidget
{
    Q_OBJECT

public:
    /**
    *Consturctor for Message Anchor.
    * @param parent Pointer to the parent Widget.
    */
    explicit MessageAnchor(QWidget *parent = nullptr);
    /**
    *Destructor for Message Anchor.
    */
    ~MessageAnchor();
    /**
    * Pointer to the Proxy Widget (ui representation) of the anchor
    */
    QGraphicsProxyWidget * proxy = nullptr;
    /**
    * Pointer to the message originating from or ending at this anchor.
    */
    SeqMessage *message = nullptr;
    /**
    * Pointer to the activation originating from or ending at this anchor.
    */
    ActivationElement *activation = nullptr;
    /*
    * Pointer to the destruction Icon on this anchor.
    */
    QGraphicsItem* destructionIcon = nullptr;

private:

    /**
    *Pointer to ui elements of Message Anchor.
    */
    Ui::MessageAnchor *ui;

protected:
    /**
    * Redefinition of mouseDoubleClickEvent for Message Anchor.
    * Used to add the destruction icon to the Message Anchor.
    * @param event the Mouse Event generated by the mouse double click
    */
    virtual void mouseDoubleClickEvent(QMouseEvent *event);
    /**
    * Redefinition of mousePressEvent for Message Anchor.
    * Used to set the origin or destination point of the message or activation on this Anchor Element.
    * @param event the Mouse Event generated by the mouse press
    */
    virtual void mousePressEvent(QMouseEvent *event);
    /**
    * Redefinition of mouseMoveEvent for Message Anchor.
    * Used for moving the Message Anchor together with the parent object.
    * @param event the Mouse Event generated by the mouse movement
    */
    virtual void moveEvent(QMoveEvent *event);
};



/**
* Sequence Message Class.
* Class for the Messgaes sent in the sequence diagram.
*/
class SeqMessage : public QWidget
{
    Q_OBJECT
public:
    /**
    *Consturctor for ASequence Message.
    * @param parent Pointer to the parent Widget.
    */
    explicit SeqMessage(QWidget *parent = nullptr);
    /**
    *Destructor for ASequence Message.
    */
    ~SeqMessage();

    /**
    * Function creates a combo box above the message
    */
    void addComboBox();
    /**
    * Function updates avaiable messages
    */
    void updateMessages();
    /**
    * Function updates the position of the combo box 
    */
    void updateCBoxLoc();
    /**
    * Function updates the Arrow Head position
    */
    void updateArrowHead();
    /**
    * Function sets the arrow type for the message
    * @param arrowType Type of the arrow
    */
    void setArrow(int arrowType);

    /**
    * The current type of the arrow.
    * Legend: 
    * 0 - Synchronous message
    * 1 - Asynchronous message
    * 2 - Return message
    */
    int messageType = 0;

    /**
    * Pointer to the graphical representation of the message line
    */
    QGraphicsLineItem *messageLine = nullptr;

    /**
    * Pointer to the Combo Box containing the name of the message
    */
    QComboBox *messageName = nullptr;
    /**
    * Pointer to the graphical representation of the Combo Box
    */
    QGraphicsProxyWidget *messageNameProxy = nullptr;
    /**
    * Pointer to the Arrow Head of the message
    */
    QGraphicsItem *arrowHeadProxy = nullptr;
    /**
    * Pointer to the source anhor of the message
    */
    MessageAnchor *sourceAnchor = nullptr;
    /**
    * Pointer to the destination anchor of the message
    */
    MessageAnchor *destAnchor = nullptr;

    /**
    * Source position of the message
    */
    QPoint sourcePos;
    /**
    * Destination position of the message
    */
    QPoint destPos;

private:
    /**
    * Function for detecting Generalization
    * Function finds all usable methods for a message through generalization
    * @param possVector Vector of Class Elements that possibly hold methods reachable through generalization or other such Class Elements
    * @param trueVector Vector of Class Elements that are reachable through generalization
    * @param visited Vector of Class Elements that were already visited
    */
    void findGen(QVector<ClassElement*> *possVector, QVector<ClassElement*> *trueVector, QVector<ClassElement*> *visited);


signals:

};

/** 
*Activation Element Class.
*   Class for the Activation Element of sequence diagram.
*/
class ActivationElement : public QWidget
{
    Q_OBJECT
public:
    /**
    *Consturctor for Activation Element.
    * @param parent Pointer to the parent Widget.
    */
    explicit ActivationElement(QWidget *parent = nullptr);
    /**
    *Destructor for Actor Element.
    */
    ~ActivationElement();

    /**
    * Pointer to the activation rectangle
    */ 
    QGraphicsRectItem *actRect = nullptr;

    /**
    * Pointer to the source anchor of the activation
    */
    MessageAnchor *sourceAnchor = nullptr;
    /**
    * Pointer to the destination anchor of the activation
    */
    MessageAnchor *destAnchor = nullptr;

    /**
    * Source position of the activation
    */
    QPoint sourcePos;
    /**
    * Destination position of the activation
    */
    QPoint destPos;

signals:

};


#endif // OBJECTELEMENT_H
